// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0--rc2
// source: api/helloworld/v1/driver.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Driver_SendSms_FullMethodName     = "/api.helloworld.v1.Driver/SendSms"
	Driver_Login_FullMethodName       = "/api.helloworld.v1.Driver/Login"
	Driver_Update_FullMethodName      = "/api.helloworld.v1.Driver/Update"
	Driver_RealName_FullMethodName    = "/api.helloworld.v1.Driver/RealName"
	Driver_HomeStat_FullMethodName    = "/api.helloworld.v1.Driver/HomeStat"
	Driver_Depart_FullMethodName      = "/api.helloworld.v1.Driver/Depart"
	Driver_AcceptOrder_FullMethodName = "/api.helloworld.v1.Driver/AcceptOrder"
)

// DriverClient is the client API for Driver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 司机服务
type DriverClient interface {
	// 短信发送
	SendSms(ctx context.Context, in *DriverSendSmsRequest, opts ...grpc.CallOption) (*DriverSendSmsResponse, error)
	// 登录注册一体化
	Login(ctx context.Context, in *DriverLoginRequest, opts ...grpc.CallOption) (*DriverLoginResponse, error)
	// 完善信息
	Update(ctx context.Context, in *UpdateDriverRequest, opts ...grpc.CallOption) (*UpdateDriverResponse, error)
	// 司机实名认证请求
	RealName(ctx context.Context, in *RealNameRequest, opts ...grpc.CallOption) (*RealNameResponse, error)
	// 首页统计数据请求
	HomeStat(ctx context.Context, in *HomeStatRequest, opts ...grpc.CallOption) (*HomeStatResponse, error)
	// 司机出车
	Depart(ctx context.Context, in *DriverDepartRequest, opts ...grpc.CallOption) (*DriverDepartResponse, error)
	// 司机接单
	AcceptOrder(ctx context.Context, in *DriverAcceptOrderRequest, opts ...grpc.CallOption) (*DriverAcceptOrderResponse, error)
}

type driverClient struct {
	cc grpc.ClientConnInterface
}

func NewDriverClient(cc grpc.ClientConnInterface) DriverClient {
	return &driverClient{cc}
}

func (c *driverClient) SendSms(ctx context.Context, in *DriverSendSmsRequest, opts ...grpc.CallOption) (*DriverSendSmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverSendSmsResponse)
	err := c.cc.Invoke(ctx, Driver_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Login(ctx context.Context, in *DriverLoginRequest, opts ...grpc.CallOption) (*DriverLoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverLoginResponse)
	err := c.cc.Invoke(ctx, Driver_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Update(ctx context.Context, in *UpdateDriverRequest, opts ...grpc.CallOption) (*UpdateDriverResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDriverResponse)
	err := c.cc.Invoke(ctx, Driver_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) RealName(ctx context.Context, in *RealNameRequest, opts ...grpc.CallOption) (*RealNameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealNameResponse)
	err := c.cc.Invoke(ctx, Driver_RealName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) HomeStat(ctx context.Context, in *HomeStatRequest, opts ...grpc.CallOption) (*HomeStatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HomeStatResponse)
	err := c.cc.Invoke(ctx, Driver_HomeStat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) Depart(ctx context.Context, in *DriverDepartRequest, opts ...grpc.CallOption) (*DriverDepartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverDepartResponse)
	err := c.cc.Invoke(ctx, Driver_Depart_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *driverClient) AcceptOrder(ctx context.Context, in *DriverAcceptOrderRequest, opts ...grpc.CallOption) (*DriverAcceptOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverAcceptOrderResponse)
	err := c.cc.Invoke(ctx, Driver_AcceptOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DriverServer is the server API for Driver service.
// All implementations must embed UnimplementedDriverServer
// for forward compatibility.
//
// 司机服务
type DriverServer interface {
	// 短信发送
	SendSms(context.Context, *DriverSendSmsRequest) (*DriverSendSmsResponse, error)
	// 登录注册一体化
	Login(context.Context, *DriverLoginRequest) (*DriverLoginResponse, error)
	// 完善信息
	Update(context.Context, *UpdateDriverRequest) (*UpdateDriverResponse, error)
	// 司机实名认证请求
	RealName(context.Context, *RealNameRequest) (*RealNameResponse, error)
	// 首页统计数据请求
	HomeStat(context.Context, *HomeStatRequest) (*HomeStatResponse, error)
	// 司机出车
	Depart(context.Context, *DriverDepartRequest) (*DriverDepartResponse, error)
	// 司机接单
	AcceptOrder(context.Context, *DriverAcceptOrderRequest) (*DriverAcceptOrderResponse, error)
	mustEmbedUnimplementedDriverServer()
}

// UnimplementedDriverServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDriverServer struct{}

func (UnimplementedDriverServer) SendSms(context.Context, *DriverSendSmsRequest) (*DriverSendSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedDriverServer) Login(context.Context, *DriverLoginRequest) (*DriverLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDriverServer) Update(context.Context, *UpdateDriverRequest) (*UpdateDriverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDriverServer) RealName(context.Context, *RealNameRequest) (*RealNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealName not implemented")
}
func (UnimplementedDriverServer) HomeStat(context.Context, *HomeStatRequest) (*HomeStatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HomeStat not implemented")
}
func (UnimplementedDriverServer) Depart(context.Context, *DriverDepartRequest) (*DriverDepartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Depart not implemented")
}
func (UnimplementedDriverServer) AcceptOrder(context.Context, *DriverAcceptOrderRequest) (*DriverAcceptOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOrder not implemented")
}
func (UnimplementedDriverServer) mustEmbedUnimplementedDriverServer() {}
func (UnimplementedDriverServer) testEmbeddedByValue()                {}

// UnsafeDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DriverServer will
// result in compilation errors.
type UnsafeDriverServer interface {
	mustEmbedUnimplementedDriverServer()
}

func RegisterDriverServer(s grpc.ServiceRegistrar, srv DriverServer) {
	// If the following call pancis, it indicates UnimplementedDriverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Driver_ServiceDesc, srv)
}

func _Driver_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverSendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Driver_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).SendSms(ctx, req.(*DriverSendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Driver_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Login(ctx, req.(*DriverLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDriverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Driver_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Update(ctx, req.(*UpdateDriverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_RealName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).RealName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Driver_RealName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).RealName(ctx, req.(*RealNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_HomeStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).HomeStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Driver_HomeStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).HomeStat(ctx, req.(*HomeStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_Depart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverDepartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).Depart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Driver_Depart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).Depart(ctx, req.(*DriverDepartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Driver_AcceptOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverAcceptOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DriverServer).AcceptOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Driver_AcceptOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DriverServer).AcceptOrder(ctx, req.(*DriverAcceptOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Driver_ServiceDesc is the grpc.ServiceDesc for Driver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Driver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.helloworld.v1.Driver",
	HandlerType: (*DriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _Driver_SendSms_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Driver_Login_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Driver_Update_Handler,
		},
		{
			MethodName: "RealName",
			Handler:    _Driver_RealName_Handler,
		},
		{
			MethodName: "HomeStat",
			Handler:    _Driver_HomeStat_Handler,
		},
		{
			MethodName: "Depart",
			Handler:    _Driver_Depart_Handler,
		},
		{
			MethodName: "AcceptOrder",
			Handler:    _Driver_AcceptOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/helloworld/v1/driver.proto",
}
