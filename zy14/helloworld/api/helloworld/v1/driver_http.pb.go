// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.0--rc2
// source: api/helloworld/v1/driver.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDriverAcceptOrder = "/api.helloworld.v1.Driver/AcceptOrder"
const OperationDriverDepart = "/api.helloworld.v1.Driver/Depart"
const OperationDriverHomeStat = "/api.helloworld.v1.Driver/HomeStat"
const OperationDriverLogin = "/api.helloworld.v1.Driver/Login"
const OperationDriverRealName = "/api.helloworld.v1.Driver/RealName"
const OperationDriverSendSms = "/api.helloworld.v1.Driver/SendSms"
const OperationDriverUpdate = "/api.helloworld.v1.Driver/Update"

type DriverHTTPServer interface {
	// AcceptOrder 司机接单
	AcceptOrder(context.Context, *DriverAcceptOrderRequest) (*DriverAcceptOrderResponse, error)
	// Depart 司机出车
	Depart(context.Context, *DriverDepartRequest) (*DriverDepartResponse, error)
	// HomeStat 首页统计数据请求
	HomeStat(context.Context, *HomeStatRequest) (*HomeStatResponse, error)
	// Login登录注册一体化
	Login(context.Context, *DriverLoginRequest) (*DriverLoginResponse, error)
	// RealName 司机实名认证请求
	RealName(context.Context, *RealNameRequest) (*RealNameResponse, error)
	// SendSms短信发送
	SendSms(context.Context, *DriverSendSmsRequest) (*DriverSendSmsResponse, error)
	// Update完善信息
	Update(context.Context, *UpdateDriverRequest) (*UpdateDriverResponse, error)
}

func RegisterDriverHTTPServer(s *http.Server, srv DriverHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/driver/sendSms", _Driver_SendSms0_HTTP_Handler(srv))
	r.POST("/v1/driver/login", _Driver_Login0_HTTP_Handler(srv))
	r.POST("/v1/driver/update", _Driver_Update0_HTTP_Handler(srv))
	r.POST("/v1/driver/realName", _Driver_RealName0_HTTP_Handler(srv))
	r.GET("/v1/driver/homeStat", _Driver_HomeStat0_HTTP_Handler(srv))
	r.POST("/v1/driver/depart", _Driver_Depart0_HTTP_Handler(srv))
	r.POST("/v1/driver/acceptOrder", _Driver_AcceptOrder0_HTTP_Handler(srv))
}

func _Driver_SendSms0_HTTP_Handler(srv DriverHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DriverSendSmsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDriverSendSms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendSms(ctx, req.(*DriverSendSmsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DriverSendSmsResponse)
		return ctx.Result(200, reply)
	}
}

func _Driver_Login0_HTTP_Handler(srv DriverHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DriverLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDriverLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*DriverLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DriverLoginResponse)
		return ctx.Result(200, reply)
	}
}

func _Driver_Update0_HTTP_Handler(srv DriverHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDriverRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDriverUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UpdateDriverRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDriverResponse)
		return ctx.Result(200, reply)
	}
}

func _Driver_RealName0_HTTP_Handler(srv DriverHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RealNameRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDriverRealName)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RealName(ctx, req.(*RealNameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RealNameResponse)
		return ctx.Result(200, reply)
	}
}

func _Driver_HomeStat0_HTTP_Handler(srv DriverHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in HomeStatRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDriverHomeStat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.HomeStat(ctx, req.(*HomeStatRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HomeStatResponse)
		return ctx.Result(200, reply)
	}
}

func _Driver_Depart0_HTTP_Handler(srv DriverHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DriverDepartRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDriverDepart)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Depart(ctx, req.(*DriverDepartRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DriverDepartResponse)
		return ctx.Result(200, reply)
	}
}

func _Driver_AcceptOrder0_HTTP_Handler(srv DriverHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DriverAcceptOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDriverAcceptOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AcceptOrder(ctx, req.(*DriverAcceptOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DriverAcceptOrderResponse)
		return ctx.Result(200, reply)
	}
}

type DriverHTTPClient interface {
	AcceptOrder(ctx context.Context, req *DriverAcceptOrderRequest, opts ...http.CallOption) (rsp *DriverAcceptOrderResponse, err error)
	Depart(ctx context.Context, req *DriverDepartRequest, opts ...http.CallOption) (rsp *DriverDepartResponse, err error)
	HomeStat(ctx context.Context, req *HomeStatRequest, opts ...http.CallOption) (rsp *HomeStatResponse, err error)
	Login(ctx context.Context, req *DriverLoginRequest, opts ...http.CallOption) (rsp *DriverLoginResponse, err error)
	RealName(ctx context.Context, req *RealNameRequest, opts ...http.CallOption) (rsp *RealNameResponse, err error)
	SendSms(ctx context.Context, req *DriverSendSmsRequest, opts ...http.CallOption) (rsp *DriverSendSmsResponse, err error)
	Update(ctx context.Context, req *UpdateDriverRequest, opts ...http.CallOption) (rsp *UpdateDriverResponse, err error)
}

type DriverHTTPClientImpl struct {
	cc *http.Client
}

func NewDriverHTTPClient(client *http.Client) DriverHTTPClient {
	return &DriverHTTPClientImpl{client}
}

func (c *DriverHTTPClientImpl) AcceptOrder(ctx context.Context, in *DriverAcceptOrderRequest, opts ...http.CallOption) (*DriverAcceptOrderResponse, error) {
	var out DriverAcceptOrderResponse
	pattern := "/v1/driver/acceptOrder"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDriverAcceptOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DriverHTTPClientImpl) Depart(ctx context.Context, in *DriverDepartRequest, opts ...http.CallOption) (*DriverDepartResponse, error) {
	var out DriverDepartResponse
	pattern := "/v1/driver/depart"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDriverDepart))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DriverHTTPClientImpl) HomeStat(ctx context.Context, in *HomeStatRequest, opts ...http.CallOption) (*HomeStatResponse, error) {
	var out HomeStatResponse
	pattern := "/v1/driver/homeStat"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDriverHomeStat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DriverHTTPClientImpl) Login(ctx context.Context, in *DriverLoginRequest, opts ...http.CallOption) (*DriverLoginResponse, error) {
	var out DriverLoginResponse
	pattern := "/v1/driver/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDriverLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DriverHTTPClientImpl) RealName(ctx context.Context, in *RealNameRequest, opts ...http.CallOption) (*RealNameResponse, error) {
	var out RealNameResponse
	pattern := "/v1/driver/realName"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDriverRealName))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DriverHTTPClientImpl) SendSms(ctx context.Context, in *DriverSendSmsRequest, opts ...http.CallOption) (*DriverSendSmsResponse, error) {
	var out DriverSendSmsResponse
	pattern := "/v1/driver/sendSms"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDriverSendSms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DriverHTTPClientImpl) Update(ctx context.Context, in *UpdateDriverRequest, opts ...http.CallOption) (*UpdateDriverResponse, error) {
	var out UpdateDriverResponse
	pattern := "/v1/driver/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDriverUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
