// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v6.31.0--rc2
// source: api/helloworld/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserCommentDriver = "/api.helloworld.v1.User/CommentDriver"
const OperationUserCreateTrip = "/api.helloworld.v1.User/CreateTrip"
const OperationUserCreateUserOrder = "/api.helloworld.v1.User/CreateUserOrder"
const OperationUserGetCurrentLocation = "/api.helloworld.v1.User/GetCurrentLocation"
const OperationUserLogin = "/api.helloworld.v1.User/Login"
const OperationUserSendSms = "/api.helloworld.v1.User/SendSms"
const OperationUserUpdate = "/api.helloworld.v1.User/Update"
const OperationUserUserSearch = "/api.helloworld.v1.User/UserSearch"

type UserHTTPServer interface {
	// CommentDriver司机评价
	CommentDriver(context.Context, *UserCommentDriverRequest) (*UserCommentDriverResponse, error)
	// CreateTrip创建行程
	CreateTrip(context.Context, *CreateTripRequest) (*CreateTripResponse, error)
	// CreateUserOrder用户叫车
	CreateUserOrder(context.Context, *CreateUserOrderRequest) (*CreateUserOrderResponse, error)
	// GetCurrentLocation获取当前位置
	GetCurrentLocation(context.Context, *GetCurrentLocationRequest) (*GetCurrentLocationResponse, error)
	// Login登录注册一体化
	Login(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	// SendSms短信验证
	SendSms(context.Context, *UserSendSmsRequest) (*UserSendSmsResponse, error)
	// Update完善信息
	Update(context.Context, *UserUpdateRequest) (*UserUpdateResponse, error)
	// UserSearch搜索历史
	UserSearch(context.Context, *UserSearchRequest) (*UserSearchResponse, error)
}

func RegisterUserHTTPServer(s *http.Server, srv UserHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user/sendSms", _User_SendSms0_HTTP_Handler(srv))
	r.POST("/v1/user/login", _User_Login0_HTTP_Handler(srv))
	r.POST("/v1/user/update", _User_Update0_HTTP_Handler(srv))
	r.POST("/v1/user/userSearch", _User_UserSearch0_HTTP_Handler(srv))
	r.POST("/v1/order/userOrder", _User_CreateUserOrder0_HTTP_Handler(srv))
	r.POST("/v1/user/comment", _User_CommentDriver0_HTTP_Handler(srv))
	r.POST("/v1/user/trip", _User_CreateTrip0_HTTP_Handler(srv))
	r.GET("/v1/user/currentLocation", _User_GetCurrentLocation0_HTTP_Handler(srv))
}

func _User_SendSms0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserSendSmsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserSendSms)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SendSms(ctx, req.(*UserSendSmsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserSendSmsResponse)
		return ctx.Result(200, reply)
	}
}

func _User_Login0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*UserLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserLoginResponse)
		return ctx.Result(200, reply)
	}
}

func _User_Update0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserUpdateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUpdate)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Update(ctx, req.(*UserUpdateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserUpdateResponse)
		return ctx.Result(200, reply)
	}
}

func _User_UserSearch0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserSearchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserUserSearch)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserSearch(ctx, req.(*UserSearchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserSearchResponse)
		return ctx.Result(200, reply)
	}
}

func _User_CreateUserOrder0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateUserOrderRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCreateUserOrder)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateUserOrder(ctx, req.(*CreateUserOrderRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateUserOrderResponse)
		return ctx.Result(200, reply)
	}
}

func _User_CommentDriver0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserCommentDriverRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCommentDriver)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CommentDriver(ctx, req.(*UserCommentDriverRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserCommentDriverResponse)
		return ctx.Result(200, reply)
	}
}

func _User_CreateTrip0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTripRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserCreateTrip)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTrip(ctx, req.(*CreateTripRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTripResponse)
		return ctx.Result(200, reply)
	}
}

func _User_GetCurrentLocation0_HTTP_Handler(srv UserHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetCurrentLocationRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserGetCurrentLocation)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCurrentLocation(ctx, req.(*GetCurrentLocationRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetCurrentLocationResponse)
		return ctx.Result(200, reply)
	}
}

type UserHTTPClient interface {
	CommentDriver(ctx context.Context, req *UserCommentDriverRequest, opts ...http.CallOption) (rsp *UserCommentDriverResponse, err error)
	CreateTrip(ctx context.Context, req *CreateTripRequest, opts ...http.CallOption) (rsp *CreateTripResponse, err error)
	CreateUserOrder(ctx context.Context, req *CreateUserOrderRequest, opts ...http.CallOption) (rsp *CreateUserOrderResponse, err error)
	GetCurrentLocation(ctx context.Context, req *GetCurrentLocationRequest, opts ...http.CallOption) (rsp *GetCurrentLocationResponse, err error)
	Login(ctx context.Context, req *UserLoginRequest, opts ...http.CallOption) (rsp *UserLoginResponse, err error)
	SendSms(ctx context.Context, req *UserSendSmsRequest, opts ...http.CallOption) (rsp *UserSendSmsResponse, err error)
	Update(ctx context.Context, req *UserUpdateRequest, opts ...http.CallOption) (rsp *UserUpdateResponse, err error)
	UserSearch(ctx context.Context, req *UserSearchRequest, opts ...http.CallOption) (rsp *UserSearchResponse, err error)
}

type UserHTTPClientImpl struct {
	cc *http.Client
}

func NewUserHTTPClient(client *http.Client) UserHTTPClient {
	return &UserHTTPClientImpl{client}
}

func (c *UserHTTPClientImpl) CommentDriver(ctx context.Context, in *UserCommentDriverRequest, opts ...http.CallOption) (*UserCommentDriverResponse, error) {
	var out UserCommentDriverResponse
	pattern := "/v1/user/comment"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCommentDriver))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...http.CallOption) (*CreateTripResponse, error) {
	var out CreateTripResponse
	pattern := "/v1/user/trip"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCreateTrip))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) CreateUserOrder(ctx context.Context, in *CreateUserOrderRequest, opts ...http.CallOption) (*CreateUserOrderResponse, error) {
	var out CreateUserOrderResponse
	pattern := "/v1/order/userOrder"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserCreateUserOrder))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) GetCurrentLocation(ctx context.Context, in *GetCurrentLocationRequest, opts ...http.CallOption) (*GetCurrentLocationResponse, error) {
	var out GetCurrentLocationResponse
	pattern := "/v1/user/currentLocation"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserGetCurrentLocation))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) Login(ctx context.Context, in *UserLoginRequest, opts ...http.CallOption) (*UserLoginResponse, error) {
	var out UserLoginResponse
	pattern := "/v1/user/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) SendSms(ctx context.Context, in *UserSendSmsRequest, opts ...http.CallOption) (*UserSendSmsResponse, error) {
	var out UserSendSmsResponse
	pattern := "/v1/user/sendSms"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserSendSms))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) Update(ctx context.Context, in *UserUpdateRequest, opts ...http.CallOption) (*UserUpdateResponse, error) {
	var out UserUpdateResponse
	pattern := "/v1/user/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUpdate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserHTTPClientImpl) UserSearch(ctx context.Context, in *UserSearchRequest, opts ...http.CallOption) (*UserSearchResponse, error) {
	var out UserSearchResponse
	pattern := "/v1/user/userSearch"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserUserSearch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
