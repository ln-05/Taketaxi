// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: helloworld/v1/greeter.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Greeter_SendSms_FullMethodName        = "/helloworld.v1.Greeter/SendSms"
	Greeter_Login_FullMethodName          = "/helloworld.v1.Greeter/Login"
	Greeter_UpdateUser_FullMethodName     = "/helloworld.v1.Greeter/UpdateUser"
	Greeter_InfoUser_FullMethodName       = "/helloworld.v1.Greeter/InfoUser"
	Greeter_RealName_FullMethodName       = "/helloworld.v1.Greeter/RealName"
	Greeter_DriverRegister_FullMethodName = "/helloworld.v1.Greeter/DriverRegister"
	Greeter_DriverStatus_FullMethodName   = "/helloworld.v1.Greeter/DriverStatus"
	Greeter_DriverUpdate_FullMethodName   = "/helloworld.v1.Greeter/DriverUpdate"
	Greeter_AddressList_FullMethodName    = "/helloworld.v1.Greeter/AddressList"
	Greeter_UserAddress_FullMethodName    = "/helloworld.v1.Greeter/UserAddress"
	Greeter_CreateTrip_FullMethodName     = "/helloworld.v1.Greeter/CreateTrip"
	Greeter_DriverOrder_FullMethodName    = "/helloworld.v1.Greeter/DriverOrder"
	Greeter_PayOrder_FullMethodName       = "/helloworld.v1.Greeter/PayOrder"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error)
	InfoUser(ctx context.Context, in *InfoUserRequest, opts ...grpc.CallOption) (*InfoUserReply, error)
	RealName(ctx context.Context, in *RealNameRequest, opts ...grpc.CallOption) (*RealNameReply, error)
	DriverRegister(ctx context.Context, in *DriverRegisterRequest, opts ...grpc.CallOption) (*DriverRegisterReply, error)
	DriverStatus(ctx context.Context, in *DriverStatusRequest, opts ...grpc.CallOption) (*DriverStatusReply, error)
	DriverUpdate(ctx context.Context, in *DriverUpdateRequest, opts ...grpc.CallOption) (*DriverUpdateReply, error)
	AddressList(ctx context.Context, in *AddressListRequest, opts ...grpc.CallOption) (*AddressListReply, error)
	UserAddress(ctx context.Context, in *UserAddressRequest, opts ...grpc.CallOption) (*UserAddressReply, error)
	CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripReply, error)
	DriverOrder(ctx context.Context, in *DriverOrderRequest, opts ...grpc.CallOption) (*DriverOrderReply, error)
	PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsReply)
	err := c.cc.Invoke(ctx, Greeter_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, Greeter_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateUserReply)
	err := c.cc.Invoke(ctx, Greeter_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) InfoUser(ctx context.Context, in *InfoUserRequest, opts ...grpc.CallOption) (*InfoUserReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoUserReply)
	err := c.cc.Invoke(ctx, Greeter_InfoUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) RealName(ctx context.Context, in *RealNameRequest, opts ...grpc.CallOption) (*RealNameReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RealNameReply)
	err := c.cc.Invoke(ctx, Greeter_RealName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DriverRegister(ctx context.Context, in *DriverRegisterRequest, opts ...grpc.CallOption) (*DriverRegisterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverRegisterReply)
	err := c.cc.Invoke(ctx, Greeter_DriverRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DriverStatus(ctx context.Context, in *DriverStatusRequest, opts ...grpc.CallOption) (*DriverStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverStatusReply)
	err := c.cc.Invoke(ctx, Greeter_DriverStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DriverUpdate(ctx context.Context, in *DriverUpdateRequest, opts ...grpc.CallOption) (*DriverUpdateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverUpdateReply)
	err := c.cc.Invoke(ctx, Greeter_DriverUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) AddressList(ctx context.Context, in *AddressListRequest, opts ...grpc.CallOption) (*AddressListReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressListReply)
	err := c.cc.Invoke(ctx, Greeter_AddressList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) UserAddress(ctx context.Context, in *UserAddressRequest, opts ...grpc.CallOption) (*UserAddressReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserAddressReply)
	err := c.cc.Invoke(ctx, Greeter_UserAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) CreateTrip(ctx context.Context, in *CreateTripRequest, opts ...grpc.CallOption) (*CreateTripReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTripReply)
	err := c.cc.Invoke(ctx, Greeter_CreateTrip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) DriverOrder(ctx context.Context, in *DriverOrderRequest, opts ...grpc.CallOption) (*DriverOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DriverOrderReply)
	err := c.cc.Invoke(ctx, Greeter_DriverOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) PayOrder(ctx context.Context, in *PayOrderRequest, opts ...grpc.CallOption) (*PayOrderReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PayOrderReply)
	err := c.cc.Invoke(ctx, Greeter_PayOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility.
type GreeterServer interface {
	SendSms(context.Context, *SendSmsRequest) (*SendSmsReply, error)
	Login(context.Context, *LoginRequest) (*LoginReply, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error)
	InfoUser(context.Context, *InfoUserRequest) (*InfoUserReply, error)
	RealName(context.Context, *RealNameRequest) (*RealNameReply, error)
	DriverRegister(context.Context, *DriverRegisterRequest) (*DriverRegisterReply, error)
	DriverStatus(context.Context, *DriverStatusRequest) (*DriverStatusReply, error)
	DriverUpdate(context.Context, *DriverUpdateRequest) (*DriverUpdateReply, error)
	AddressList(context.Context, *AddressListRequest) (*AddressListReply, error)
	UserAddress(context.Context, *UserAddressRequest) (*UserAddressReply, error)
	CreateTrip(context.Context, *CreateTripRequest) (*CreateTripReply, error)
	DriverOrder(context.Context, *DriverOrderRequest) (*DriverOrderReply, error)
	PayOrder(context.Context, *PayOrderRequest) (*PayOrderReply, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGreeterServer struct{}

func (UnimplementedGreeterServer) SendSms(context.Context, *SendSmsRequest) (*SendSmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedGreeterServer) Login(context.Context, *LoginRequest) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGreeterServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedGreeterServer) InfoUser(context.Context, *InfoUserRequest) (*InfoUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoUser not implemented")
}
func (UnimplementedGreeterServer) RealName(context.Context, *RealNameRequest) (*RealNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RealName not implemented")
}
func (UnimplementedGreeterServer) DriverRegister(context.Context, *DriverRegisterRequest) (*DriverRegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverRegister not implemented")
}
func (UnimplementedGreeterServer) DriverStatus(context.Context, *DriverStatusRequest) (*DriverStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverStatus not implemented")
}
func (UnimplementedGreeterServer) DriverUpdate(context.Context, *DriverUpdateRequest) (*DriverUpdateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverUpdate not implemented")
}
func (UnimplementedGreeterServer) AddressList(context.Context, *AddressListRequest) (*AddressListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressList not implemented")
}
func (UnimplementedGreeterServer) UserAddress(context.Context, *UserAddressRequest) (*UserAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddress not implemented")
}
func (UnimplementedGreeterServer) CreateTrip(context.Context, *CreateTripRequest) (*CreateTripReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrip not implemented")
}
func (UnimplementedGreeterServer) DriverOrder(context.Context, *DriverOrderRequest) (*DriverOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriverOrder not implemented")
}
func (UnimplementedGreeterServer) PayOrder(context.Context, *PayOrderRequest) (*PayOrderReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayOrder not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}
func (UnimplementedGreeterServer) testEmbeddedByValue()                 {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	// If the following call pancis, it indicates UnimplementedGreeterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_InfoUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).InfoUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_InfoUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).InfoUser(ctx, req.(*InfoUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_RealName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RealNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).RealName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_RealName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).RealName(ctx, req.(*RealNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DriverRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DriverRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_DriverRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DriverRegister(ctx, req.(*DriverRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DriverStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DriverStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_DriverStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DriverStatus(ctx, req.(*DriverStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DriverUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DriverUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_DriverUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DriverUpdate(ctx, req.(*DriverUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_AddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).AddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_AddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).AddressList(ctx, req.(*AddressListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_UserAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).UserAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_UserAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).UserAddress(ctx, req.(*UserAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_CreateTrip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTripRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).CreateTrip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_CreateTrip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).CreateTrip(ctx, req.(*CreateTripRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_DriverOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriverOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).DriverOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_DriverOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).DriverOrder(ctx, req.(*DriverOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_PayOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).PayOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_PayOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).PayOrder(ctx, req.(*PayOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "helloworld.v1.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _Greeter_SendSms_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Greeter_Login_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Greeter_UpdateUser_Handler,
		},
		{
			MethodName: "InfoUser",
			Handler:    _Greeter_InfoUser_Handler,
		},
		{
			MethodName: "RealName",
			Handler:    _Greeter_RealName_Handler,
		},
		{
			MethodName: "DriverRegister",
			Handler:    _Greeter_DriverRegister_Handler,
		},
		{
			MethodName: "DriverStatus",
			Handler:    _Greeter_DriverStatus_Handler,
		},
		{
			MethodName: "DriverUpdate",
			Handler:    _Greeter_DriverUpdate_Handler,
		},
		{
			MethodName: "AddressList",
			Handler:    _Greeter_AddressList_Handler,
		},
		{
			MethodName: "UserAddress",
			Handler:    _Greeter_UserAddress_Handler,
		},
		{
			MethodName: "CreateTrip",
			Handler:    _Greeter_CreateTrip_Handler,
		},
		{
			MethodName: "DriverOrder",
			Handler:    _Greeter_DriverOrder_Handler,
		},
		{
			MethodName: "PayOrder",
			Handler:    _Greeter_PayOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helloworld/v1/greeter.proto",
}
